globals [gap water land shore scaling-unit scaled_transmission_range scaling_factor nodes_linked value check temp_1 temp_2 temp_3 temp_4 temp_5 temp_6 temp_7 temp_8 temp_9 temp_10 temp_11 temp_12 temp_13 temp_14 temp_15 temp_16 temp_17 temp_18  temp_19  temp_20 n node_range AUV_range AUV2_range boat_range sink_range file   
  report_AUV report_node_generate report_total_node_generate report_sink_receive report_node_sent report_node_storage report_AUV_sent report_AUV1_sent report_boat_sent auv1_depth auv2_depth]
breed [nodes node]
breed [AUV AUVs]
breed [AUV2 AUVs2]
breed [boat boats]
breed [sink sinks]
boat-own [speed_boat boat_sent AUV_sent AUV1_sent]
AUV-own [speed_AUV AUV_storage AUV_sent]
AUV2-own [speed_AUV AUV_storage AUV_sent AUV1_sent]
sink-own [sink_receive]
nodes-own [node_generate total_node_generate node_storage node_sent]
undirected-link-breed [link_boats link_boat]
undirected-link-breed [link_sink link_sinks]
undirected-link-breed [link_AUVs link_AUV]
undirected-link-breed [link_AUVs_2 link_AUV_2]

to setup
  reset-timer 
  clear-all
  data_reset
  if data_record = "file_save" [file_open]
  if real_time = false [world_scaling sensor_ranges]
  ask patches with [pycor < 7] [set pcolor 96 ]
  set water (abs (min-pycor) + 7)
  ask patches with [pycor > 10] [set pcolor 75 ]
  set land (max-pycor - 10 + 1)
  ask patches with [pcolor = black] [set pcolor 37]
  set shore (9 - 7 + 1)
  set gap (max-pxcor - min-pxcor) / (number_of_nodes + 1)
  set n (1 / 30)
  if (number_of_nodes > world-width)
    [
      user-message (word "There are too many nodes for the amount of space.\n"
        "Please lower the number of nodes by lowering the NUMBER slider.\n"
        "The setup has stopped.")
      stop
    ]
  simulation_period
  auv_depths
  create_nodes
  ;  stack_nodes
  create_AUV
  create_sink
  ;  inspect node 0
  create_boat
  show_info
  
  reset-ticks
  
  
end



to create_nodes
  
  create-nodes number_of_nodes
  [ set shape "hexagonal prism"
    set size 1.5
    set color 103
    set ycor -16
    set temp_1 0
    set temp_2 0
    
    foreach sort nodes [
      ask ? 
      [ifelse temp_1 = 0 
        [set xcor (min-pxcor + gap) set temp_1 1 set temp_2 xcor] 
        [set xcor temp_2 + gap set temp_2 (temp_2 + gap)]]]
    ;    ask nodes [set label who]
  ]
  
end

to stack_nodes
  
  create-nodes (number_of_nodes / 2) 
  [ set shape "hexagonal prism"
    set size 1.5
    set color 103
    set ycor -10
    set temp_7 0
    set temp_8 0
    
    
    foreach sort nodes [
      ask ?
      [ifelse temp_7 = 0 
        [set xcor (min-pxcor + gap * 1.5) set temp_7 1 set temp_8 xcor]
        [set xcor (temp_8 + gap * 2) set temp_8 (temp_8 + gap * 2)]]]
    ;    ask nodes [set label who]
  ]  
end

to create_AUV
  if scenario_chooser != "two_AUVs" [
    if scenario_chooser != "three_AUVs"[ 
      create-AUV 1 [
        setxy min-pxcor + 1 auv2_depth
        set shape "cylinder"
        set size 2
        set heading 90
        set label "AUV2"
      ]]]
  
  if scenario_chooser = "three_AUVs" [
    create-AUV 1 [
      setxy min-pxcor + 1 auv2_depth
      set shape "cylinder"
      set size 2
      set heading 90
      set label "AUV2"
    ]
    create-AUV 1 [
      setxy ((min-pxcor + 1) + (max-pxcor - 1)) / 2 auv2_depth
      set shape "cylinder"
      set size 2
      set heading 90
      set label "AUV3"
    ]
    create-AUV2 1 [
      setxy min-pxcor + 1 auv1_depth
      set shape "cylinder"
      set size 2
      set heading 90
      set label "AUV1"
    ]]
  
  if scenario_chooser = "two_AUVs" [
    create-AUV 1 [
      setxy min-pxcor + 1 auv2_depth
      set shape "cylinder"
      set size 2
      set heading 90
      set label "AUV2"
    ]
    create-AUV2 1 [
      setxy min-pxcor + 1 auv1_depth
      set shape "cylinder "
      set size 2
      set heading 90
      set label "AUV1"
    ]]
end

to create_boat
  create-boat number_of_boats [
    setxy random-xcor  7
    set heading 90
    set shape "boat"
    set size 5]

  
end


to create_sink
  create-sink 1
  [setxy 22 12
    set shape "v-sat"
    set size 5  
    set label "sink2"  
  ]
  
  
  create-sink 1
  [setxy -22 12
    set shape "v-sat"
    set size 5    
    set label "sink1"  
  ]
end

to linking_AUV
  create-link_AUVs-with nodes in-radius node_range
  ask links [
    set thickness 0.2
    set color 45]
end

to linking_AUV_2
  create-link_AUVs_2-with AUV in-radius AUV2_range
  ask links [
    set thickness 0.2
    set color 45 
  ]
end

to linking_AUV_3
  create-link_AUVs-with nodes with [xcor < 0] in-radius node_range
  ask links [
    set thickness 0.2
    set color 45]
end

to linking_AUV_4
  create-link_AUVs-with nodes with [xcor >= 0] in-radius node_range
  ask links [
    set thickness 0.2
    set color 45]
end


to linking_boat
  create-link_boats-with AUV in-radius AUV_range
  ask links [
    set thickness 0.2
    set color 45 
  ]
end

to linking_boat_2
  create-link_boats-with AUV2 in-radius AUV_range
  ask links [
    set thickness 0.2
    set color 45 
  ]
end

to linking_sink
  create-link_sink-with sink in-radius boat_range
  ask links [
    set thickness 0.2
    set color 45 ]
end



to move_AUV
  
  
  if real_time = true [world_scaling sensor_ranges] 
  if scenario_chooser = "basic"[
    every n [
      ask AUV [
        set speed_AUV (scaling_factor * speed_of_AUV2 * n)
        auv_cruise
        linking_AUV
        ask links [if link-length > node_range [die]
        ]]]]
  
  if scenario_chooser = "three_AUVs" [
    every n [
      ask AUVs (number_of_nodes) [
        set speed_AUV (scaling_factor * speed_of_AUV2 * n)
        auv_cruise_1
        linking_AUV_3
        ask links [if link-length > node_range [die]
        ]]]
    
    every n [
      ask AUVs (number_of_nodes + 1) [
        set speed_AUV (scaling_factor * speed_of_AUV2 * n)
        auv_cruise_2
        linking_AUV_4
        ask links [if link-length > node_range [die]
        ]]]
    every n [
      ask AUV2 [
        set speed_AUV (scaling_factor * speed_of_AUV * n)
        auv_cruise
        linking_AUV_2
        ask links [if link-length > AUV2_range [die]
        ]]]]
  
  if scenario_chooser = "two_AUVs" [
    every n [
      ask AUV [
        set speed_AUV (scaling_factor * speed_of_AUV2 * n)
        auv_cruise
        linking_AUV
        ask links [if link-length > node_range [die]
        ]]]
    
    every n [
      ask AUV2 [
        set speed_AUV (scaling_factor * speed_of_AUV * n)
        auv_cruise
        linking_AUV_2
        ask links [if link-length > AUV2_range [die]
        ]]]]
  
  reset-ticks
end
      
      
to launch_boat
  
  if real_time = true [world_scaling sensor_ranges]
  if scenario_chooser = "basic" [
    every n [
      ask boat [
        set speed_boat (scaling_factor * speed_of_boat * n)
        boat_cruise
        linking_boat
        ask link_boats [if link-length > (AUV_range) [die]]
        linking_sink
        ask link_sink [if link-length > (boat_range) [die]]
        stop]]]
  
  if scenario_chooser != "basic" [
    every n [
      ask boat [
        set speed_boat (scaling_factor * speed_of_boat * n)
        boat_cruise
        linking_boat_2
        ask link_boats [if link-length > (AUV_range) [die]]
        linking_sink
        ask link_sink [if link-length > (boat_range) [die]]
        stop]]]
  
  
  
end
      
      
      
to world_scaling 
  set scaling_factor (world-width / (world_scale * 1000)) ;; patches per meter
end
      
to sensor_ranges
  ask nodes[
    set node_range node_sensor_range * scaling_factor] ;; meters converted to patch length
  ask AUV[
    set AUV_range AUV_sensor_range * scaling_factor ;; meters converted to patch length
    set AUV2_range AUV2_sensor_range * scaling_factor]
  ask boat[
    set boat_range boat_sensor_range * scaling_factor] ;; meters converted to patch length
                                                       ;  ask sink [
                                                       ;    set sink_range sink_sensor_range * scaling_factor * 1000] ;; meters converted to patch length
  
end
      
      ;to-report linked_nodes
      ;  report nodes_linked
      ;  
      ;end
      
to data_reset
  ask nodes[
    set node_generate 0
    set node_storage 0
    set node_sent 0]
  ask AUV[
    set AUV_storage 0]
  ask boat[
    set AUV_sent 0]
  ask sink[
    set sink_receive 0]
  set temp_5 1
  
end
      
to node_data_generate
  
  if temp_5 = 1 [
    every 1 [ask nodes [set node_generate (node_generate + data_generation_rate) set report_node_generate node_generate]]]
end
      
to data
  
  if scenario_chooser = "basic" [
    
    ask nodes [set temp_15 node_generate]
    ask nodes [set total_node_generate (node_generate * number_of_nodes) set report_total_node_generate total_node_generate]
    ask AUV [ask link_AUV-neighbors [set node_sent temp_15]]
    set temp_3 (sum [node_sent] of nodes) set report_node_sent temp_3 
    ask nodes [set node_storage (node_generate - node_sent)]
    set temp_16 (sum [node_storage] of nodes) set report_node_storage temp_16 
    
    ask AUV [ask link_boat-neighbors [set AUV_sent temp_3 set report_AUV_sent AUV_sent set temp_4 AUV_sent]]
    
    ask boat [ask link_sinks-neighbors [set sink_receive temp_4 set report_sink_receive sink_receive set temp_6 sink_receive]]
    ask boat [set boat_sent temp_6 set report_boat_sent boat_sent]
    
  ]
  
  
  if scenario_chooser = "two_AUVs"[
    
    ask nodes [set temp_15 node_generate]
    ask nodes [set total_node_generate (node_generate * number_of_nodes) set report_total_node_generate total_node_generate]
    ask AUV [ask link_AUV-neighbors [set node_sent temp_15]]
    set temp_3 (sum [node_sent] of nodes) set report_node_sent temp_3 
    ask nodes [set node_storage (node_generate - node_sent)]
    set temp_16 (sum [node_storage] of nodes) set report_node_storage temp_16 
    
    ask AUV [ ask link_AUV_2-neighbors [set AUV_sent temp_3 set report_AUV_sent AUV_sent set temp_4 AUV_sent]]
    ask AUV2  [ask link_boat-neighbors [set AUV1_sent temp_4 set report_AUV1_sent AUV1_sent set temp_14 AUV1_sent]]
    
    ask boat [ask link_sinks-neighbors [set sink_receive temp_14 set report_sink_receive sink_receive set temp_6 sink_receive]]
    ask boat [set boat_sent temp_6 set report_boat_sent boat_sent]
    
  ]
  
  
  if scenario_chooser = "three_AUVs" [
    
    ask nodes [set temp_15 node_generate]
    ask nodes [set total_node_generate (node_generate * number_of_nodes) set report_total_node_generate total_node_generate]
    ask AUV [ask link_AUV-neighbors [set node_sent temp_15]]
    set temp_3 (sum [node_sent] of nodes) set report_node_sent temp_3 
    ask nodes [set node_storage (node_generate - node_sent)]
    set temp_16 (sum [node_storage] of nodes) set report_node_storage temp_16 
    
    set temp_10 (sum [node_sent] of nodes with [xcor < 0])
    set temp_11 (sum [node_sent] of nodes with [xcor >= 0])
    
    ;    ask AUVs (number_of_nodes) [ask link_boat-neighbors [set temp_12 temp_10]]
    ;    ask AUVs (number_of_nodes + 1) [ask link_boat-neighbors [set temp_13 temp_11]]
    ;    ask AUV [ set AUV_sent (temp_12 + temp_13) set report_AUV_sent AUV_sent set temp_4 AUV_sent]
    ;    
    ;    ask boat [ask link_sinks-neighbors [set sink_receive temp_4 set report_sink_receive sink_receive set temp_6 sink_receive]]
    ;    ask boat [set boat_sent temp_6 set report_boat_sent boat_sent]
    
    ask AUVs (number_of_nodes) [ask link_AUV_2-neighbors[set temp_12 temp_10]]
    ask AUVs (number_of_nodes + 1) [ask link_AUV_2-neighbors [set temp_13 temp_11]]
    ask AUV [ set AUV_sent (temp_12 + temp_13) set report_AUV_sent AUV_sent set temp_4 AUV_sent]
    
    ask AUV2  [ask link_boat-neighbors [set AUV1_sent temp_4 set report_AUV1_sent AUV1_sent set temp_14 AUV1_sent]]
    
    ask boat [ask link_sinks-neighbors [set sink_receive temp_14 set report_sink_receive sink_receive set temp_6 sink_receive]]
    ask boat [set boat_sent temp_6 set report_boat_sent boat_sent]
    
    
  ]
end
      
to-report generate_node
  report report_node_generate
end
      
to-report generate_node_total
  report report_total_node_generate
  
end
      
to-report storage_node
  report report_node_storage
end
      
to-report sent_node
  report report_node_sent
end
      
to-report sent_AUV
  report report_AUV_sent
end
      
to-report sent_AUV1
  report report_AUV1_sent
end
      
to-report sent_boat
  report report_boat_sent
end
      
      
      
to-report receive_sink
  report report_sink_receive
end
      
to simulation_period
  if terminate_simulation = "elapsed_time" [if timer > (simulation_time * 60) [stop]]
end
      
to volume_data
  if terminate_simulation = "data_volume" [if report_sink_receive > (data_volume * 1024) [stop]]
end
      
to run_simulate
  move_AUV
  launch_boat
  node_data_generate
  data
  if data_record = "file_save" [file_output]
  set temp_20 timer
end
      
      
to file_open
  
  set file user-new-file
  
  if is-string? file
  [if file-exists? file
    [ file-delete file ]
  file-open file
  ]
end
      
to file_output
  file-open file
  export-plot "tota" file
end
      
to show_info
  print (word "world height is " precision ((world_scale / world-width) * world-height) 3 " kilometers")
  print (word "ocean depth is " round (water * 1000 * (world_scale / world-width)) " meters")
  print (word "node to node gap is " round (gap * 1000 * (world_scale / world-width)) " meters")
  print (word "sink separation " round ( 40 * 1000 * (world_scale / world-width)) " meters")
  
  print (word "depth of AUV1 from surface " round ((water - temp_17) * 1000 * (world_scale / world-width)) " meters")
  print (word "depth of AUV2 from surface " round ((water - temp_18) * 1000 * (world_scale / world-width)) " meters")
  
end
      
to auv_cruise
  if xcor >= max-pxcor - 1 [set heading 270]
  if heading = 270 [ ifelse xcor > min-pxcor + 1 [fd speed_AUV][set heading 90]]
  if xcor < max-pxcor - 1 [fd speed_AUV]
end
      
to auv_cruise_1
  if xcor >= temp_9 [set heading 270]
  if heading = 270 [ ifelse xcor > min-pxcor + 1 [fd speed_AUV][set heading 90]]
  if xcor < temp_9 [fd speed_AUV]
end
      
to auv_cruise_2
  if xcor >= max-pxcor - 1 [set heading 270]
  if heading = 270 [ ifelse xcor > temp_9 [fd speed_AUV][set heading 90]]
  if xcor < max-pxcor - 1 [fd speed_AUV]
end
      
to boat_cruise
  if xcor >= max-pxcor - 4 [set heading 270]
  if heading = 270 [ ifelse xcor > min-pxcor + 2 [fd speed_boat][set heading 90]]
  if xcor < max-pxcor - 1 [fd speed_boat]
end
      
to auv_depths
  
  set temp_17 (AUV1_height_from_seabed * (world-width / (world_scale * 1000)))
  set auv1_depth (min-pycor + temp_17)
  ;  print (word "auv1_depth " auv1_depth " patches")
  
  set temp_18 (AUV2_height_from_seabed * (world-width / (world_scale * 1000)))
  set auv2_depth (min-pycor + temp_18)
  ;  print (word "auv2_depth " auv2_depth " patches")
  
  
end
      
      
      ;to file_output
      ;  file-open file
      ;  ask nodes [                 
      ;    file-print total_node_generate]
      ;  file-close
      ;end
      
      
      ;to data_volume_transfer
      ;  ask nodes [set temp_6 node_generate]
      ;  ask sink [set temp_7 sink_receive]
      ;  if data_volume = temp_6[ set temp_5 0]
      ;  if temp_6 = temp_7 [output-print (word "delay time: " timer " seconds") stop]
      ;
      ;end
